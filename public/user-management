<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management - FeedFast</title>
    <link rel="stylesheet" href="/css/client-dashboard.css">
</head>
<body>
    <!-- Sidebar Navigation -->
    <div class="sidebar">
        <div class="sidebar-header">
            <img src="/logo-feedfast.webp" alt="FeedFast Logo" class="logo">
            <h2>FeedFast</h2>
        </div>
        
        <nav class="sidebar-nav">
            <a href="/dashboard" class="nav-item">
                <img src="/icon-dashboard.png" alt="" class="nav-icon">
                <span>Dashboard</span>
            </a>
            <a href="/ticket" class="nav-item">
                <img src="/icon-ticket.png" alt="" class="nav-icon">
                <span>Tickets</span>
            </a>
            <a href="/branch" class="nav-item">
                <img src="/icon-branch.png" alt="" class="nav-icon">
                <span>Branches</span>
            </a>
            <a href="/usermanagement" class="nav-item active">
                <img src="/icon-usermanagement.png" alt="" class="nav-icon">
                <span>User Management</span>
            </a>
            <a href="/report" class="nav-item">
                <img src="/icon-report.png" alt="" class="nav-icon">
                <span>Reports</span>
            </a>
        </nav>
        
        <div class="sidebar-footer">
            <div class="user-info">
                <div class="user-avatar">
                    <span id="userInitials">U</span>
                </div>
                <div class="user-details">
                    <span class="user-name" id="userName">Loading...</span>
                    <span class="user-role" id="userRole">Client Admin</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <div class="header">
            <div class="header-left">
                <h1>User Management</h1>
                <p class="page-subtitle">Manage team members and access permissions</p>
            </div>
            <div class="header-right">
                <button class="btn btn-secondary" id="refreshBtn">
                    <span>Refresh</span>
                </button>
                <button class="btn btn-primary" id="addUserBtn">
                    <span>Add New User</span>
                </button>
                <button class="btn btn-secondary" id="logoutBtn">Logout</button>
            </div>
        </div>

        <!-- Content Area -->
        <div class="content">
            <!-- Stats Cards -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-content">
                        <div class="stat-number" id="totalUsersCount">0</div>
                        <div class="stat-label">Total Users</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-content">
                        <div class="stat-number" id="activeUsersCount">0</div>
                        <div class="stat-label">Active Users</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-content">
                        <div class="stat-number" id="adminUsersCount">0</div>
                        <div class="stat-label">Admin Users</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-content">
                        <div class="stat-number" id="recentLoginsCount">0</div>
                        <div class="stat-label">Recent Logins</div>
                    </div>
                </div>
            </div>

            <!-- Filters and Search -->
            <div class="filters-section">
                <div class="search-box">
                    <input type="text" id="searchInput" placeholder="Search users by name, email, or role...">
                </div>
                <div class="filter-controls">
                    <select id="roleFilter" class="filter-select">
                        <option value="all">All Roles</option>
                        <option value="client_admin">Client Admin</option>
                        <option value="manager">Manager</option>
                        <option value="staff">Staff</option>
                    </select>
                    <select id="statusFilter" class="filter-select">
                        <option value="all">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>
            </div>

            <!-- Users Table -->
            <div class="table-container">
                <table class="data-table" id="usersTable">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Branches</th>
                            <th>Status</th>
                            <th>Last Login</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                        <!-- Users will be loaded here -->
                    </tbody>
                </table>
                
                <div id="loadingState" class="loading-state">
                    <div class="loading-spinner"></div>
                    <p>Loading users...</p>
                </div>
                
                <div id="emptyState" class="empty-state" style="display: none;">
                    <p>No users found</p>
                    <button class="btn btn-primary" onclick="showAddUserModal()">Add First User</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit User Modal -->
    <div id="userModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Add New User</h2>
                <button class="modal-close" id="closeModalBtn">&times;</button>
            </div>
            
            <form id="userForm">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="userName">Full Name <span class="required">*</span></label>
                        <input type="text" id="userName" name="user_name" required maxlength="255">
                    </div>
                    
                    <div class="form-group">
                        <label for="userEmail">Email Address <span class="required">*</span></label>
                        <input type="email" id="userEmail" name="email" required maxlength="255">
                    </div>
                    
                    <div class="form-group">
                        <label for="userRole">Role <span class="required">*</span></label>
                        <select id="userRole" name="role" required>
                            <option value="">Select Role</option>
                            <option value="client_admin">Client Admin</option>
                            <option value="manager">Manager</option>
                            <option value="staff">Staff</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="userStatus">Status</label>
                        <select id="userStatus" name="status">
                            <option value="true">Active</option>
                            <option value="false">Inactive</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="userBranches">Branch Access</label>
                    <div id="branchCheckboxes" class="checkbox-group">
                        <!-- Branch checkboxes will be loaded here -->
                    </div>
                    <small class="form-note">Leave empty for access to all branches</small>
                </div>
                
                <div id="passwordSection" class="form-group">
                    <label for="userPassword">Password <span class="required">*</span></label>
                    <input type="password" id="userPassword" name="password" minlength="8" maxlength="255">
                    <small class="form-note">Minimum 8 characters required</small>
                </div>
                
                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="saveUserBtn">
                        <span id="saveButtonText">Save User</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Confirm Delete Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content modal-sm">
            <div class="modal-header">
                <h2>Confirm Delete</h2>
                <button class="modal-close" id="closeDeleteModalBtn">&times;</button>
            </div>
            
            <div class="modal-body">
                <p>Are you sure you want to delete this user?</p>
                <p><strong id="deleteUserName"></strong></p>
                <p class="text-warning">This action cannot be undone.</p>
            </div>
            
            <div class="modal-actions">
                <button type="button" class="btn btn-secondary" id="cancelDeleteBtn">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete User</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentUser = null;
        let allUsers = [];
        let allBranches = [];
        let currentEditUserId = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            checkAuthentication();
            setupEventListeners();
            loadUsers();
            loadBranches();
        });

        // Check authentication
        function checkAuthentication() {
            const token = localStorage.getItem('clientToken');
            
            if (!token) {
                window.location.href = '/login';
                return;
            }

            // Verify token
            fetch('/api/auth/client-verify', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    currentUser = data.user;
                    updateUserInfo();
                } else {
                    localStorage.removeItem('clientToken');
                    window.location.href = '/login';
                }
            })
            .catch(error => {
                console.error('Authentication check failed:', error);
                localStorage.removeItem('clientToken');
                window.location.href = '/login';
            });
        }

        // Update user info in sidebar
        function updateUserInfo() {
            if (currentUser) {
                document.getElementById('userName').textContent = currentUser.name;
                document.getElementById('userRole').textContent = currentUser.role.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase());
                
                // Update user initials
                const initials = currentUser.name.split(' ').map(n => n[0]).join('').toUpperCase();
                document.getElementById('userInitials').textContent = initials;
            }
        }

        // Setup event listeners
        function setupEventListeners() {
            // Navigation buttons
            document.getElementById('logoutBtn').addEventListener('click', logout);
            document.getElementById('refreshBtn').addEventListener('click', loadUsers);
            document.getElementById('addUserBtn').addEventListener('click', showAddUserModal);

            // Search and filters
            document.getElementById('searchInput').addEventListener('input', filterUsers);
            document.getElementById('roleFilter').addEventListener('change', filterUsers);
            document.getElementById('statusFilter').addEventListener('change', filterUsers);

            // Modal controls
            document.getElementById('closeModalBtn').addEventListener('click', hideUserModal);
            document.getElementById('cancelBtn').addEventListener('click', hideUserModal);
            document.getElementById('closeDeleteModalBtn').addEventListener('click', hideDeleteModal);
            document.getElementById('cancelDeleteBtn').addEventListener('click', hideDeleteModal);
            
            // Form submission
            document.getElementById('userForm').addEventListener('submit', saveUser);
            document.getElementById('confirmDeleteBtn').addEventListener('click', deleteUser);

            // Modal backdrop clicks
            document.getElementById('userModal').addEventListener('click', function(e) {
                if (e.target === this) hideUserModal();
            });
            
            document.getElementById('deleteModal').addEventListener('click', function(e) {
                if (e.target === this) hideDeleteModal();
            });
        }

        // Load users from API
        async function loadUsers() {
            const token = localStorage.getItem('clientToken');
            document.getElementById('loadingState').style.display = 'block';
            document.getElementById('usersTableBody').innerHTML = '';

            try {
                const response = await fetch('/api/users/management', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    allUsers = data.users;
                    updateUserStats();
                    displayUsers(allUsers);
                } else {
                    showNotification('Error loading users: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('Error loading users:', error);
                showNotification('Failed to load users', 'error');
            } finally {
                document.getElementById('loadingState').style.display = 'none';
            }
        }

        // Load branches for branch selection
        async function loadBranches() {
            const token = localStorage.getItem('clientToken');

            try {
                const response = await fetch('/api/branches', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    allBranches = data.branches;
                    updateBranchCheckboxes();
                }
            } catch (error) {
                console.error('Error loading branches:', error);
            }
        }

        // Update branch checkboxes in modal
        function updateBranchCheckboxes() {
            const container = document.getElementById('branchCheckboxes');
            container.innerHTML = '';

            allBranches.forEach(branch => {
                const div = document.createElement('div');
                div.className = 'checkbox-item';
                div.innerHTML = `
                    <input type="checkbox" id="branch_${branch.branch_id}" value="${branch.branch_id}">
                    <label for="branch_${branch.branch_id}">${branch.branch_name} ${branch.branch_code ? '(' + branch.branch_code + ')' : ''}</label>
                `;
                container.appendChild(div);
            });
        }

        // Update user statistics
        function updateUserStats() {
            const totalUsers = allUsers.length;
            const activeUsers = allUsers.filter(user => user.status).length;
            const adminUsers = allUsers.filter(user => user.role === 'client_admin').length;
            const recentLogins = allUsers.filter(user => {
                if (!user.last_login) return false;
                const lastLogin = new Date(user.last_login);
                const sevenDaysAgo = new Date();
                sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
                return lastLogin > sevenDaysAgo;
            }).length;

            document.getElementById('totalUsersCount').textContent = totalUsers;
            document.getElementById('activeUsersCount').textContent = activeUsers;
            document.getElementById('adminUsersCount').textContent = adminUsers;
            document.getElementById('recentLoginsCount').textContent = recentLogins;
        }

        // Display users in table
        function displayUsers(users) {
            const tbody = document.getElementById('usersTableBody');
            const emptyState = document.getElementById('emptyState');

            if (users.length === 0) {
                tbody.innerHTML = '';
                emptyState.style.display = 'block';
                return;
            }

            emptyState.style.display = 'none';

            tbody.innerHTML = users.map(user => `
                <tr>
                    <td>
                        <div class="user-cell">
                            <div class="user-avatar">
                                <span>${user.user_name.split(' ').map(n => n[0]).join('').toUpperCase()}</span>
                            </div>
                            <div class="user-info">
                                <div class="user-name">${user.user_name}</div>
                                <div class="user-meta">ID: ${user.user_id}</div>
                            </div>
                        </div>
                    </td>
                    <td>${user.email}</td>
                    <td><span class="role-badge role-${user.role.replace('_', '-')}">${user.role.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}</span></td>
                    <td>${getBranchNames(user.branch_id)}</td>
                    <td>
                        <span class="status-badge ${user.status ? 'status-active' : 'status-inactive'}">
                            ${user.status ? 'Active' : 'Inactive'}
                        </span>
                    </td>
                    <td>${user.last_login ? new Date(user.last_login).toLocaleDateString() : 'Never'}</td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn btn-sm btn-secondary" onclick="editUser(${user.user_id})">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="showDeleteModal(${user.user_id})">Delete</button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        // Get branch names from branch IDs
        function getBranchNames(branchIds) {
            if (!branchIds || branchIds.length === 0) {
                return 'All Branches';
            }

            const branchNames = branchIds.map(id => {
                const branch = allBranches.find(b => b.branch_id === id);
                return branch ? branch.branch_name : `Branch ${id}`;
            });

            return branchNames.join(', ');
        }

        // Filter users based on search and filters
        function filterUsers() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const roleFilter = document.getElementById('roleFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;

            let filteredUsers = allUsers.filter(user => {
                const matchesSearch = user.user_name.toLowerCase().includes(searchTerm) ||
                                    user.email.toLowerCase().includes(searchTerm) ||
                                    user.role.toLowerCase().includes(searchTerm);

                const matchesRole = roleFilter === 'all' || user.role === roleFilter;
                const matchesStatus = statusFilter === 'all' || 
                                    (statusFilter === 'active' && user.status) ||
                                    (statusFilter === 'inactive' && !user.status);

                return matchesSearch && matchesRole && matchesStatus;
            });

            displayUsers(filteredUsers);
        }

        // Show add user modal
        function showAddUserModal() {
            currentEditUserId = null;
            document.getElementById('modalTitle').textContent = 'Add New User';
            document.getElementById('saveButtonText').textContent = 'Save User';
            document.getElementById('passwordSection').style.display = 'block';
            document.getElementById('userPassword').required = true;
            document.getElementById('userForm').reset();
            
            // Reset branch checkboxes
            document.querySelectorAll('#branchCheckboxes input[type="checkbox"]').forEach(cb => cb.checked = false);
            
            document.getElementById('userModal').style.display = 'flex';
        }

        // Edit user
        function editUser(userId) {
            const user = allUsers.find(u => u.user_id === userId);
            if (!user) return;

            currentEditUserId = userId;
            document.getElementById('modalTitle').textContent = 'Edit User';
            document.getElementById('saveButtonText').textContent = 'Update User';
            document.getElementById('passwordSection').style.display = 'none';
            document.getElementById('userPassword').required = false;

            // Fill form with user data
            document.getElementById('userName').value = user.user_name;
            document.getElementById('userEmail').value = user.email;
            document.getElementById('userRole').value = user.role;
            document.getElementById('userStatus').value = user.status.toString();

            // Set branch checkboxes
            document.querySelectorAll('#branchCheckboxes input[type="checkbox"]').forEach(cb => {
                cb.checked = user.branch_id && user.branch_id.includes(parseInt(cb.value));
            });

            document.getElementById('userModal').style.display = 'flex';
        }

        // Hide user modal
        function hideUserModal() {
            document.getElementById('userModal').style.display = 'none';
            document.getElementById('userForm').reset();
            currentEditUserId = null;
        }

        // Show delete modal
        function showDeleteModal(userId) {
            const user = allUsers.find(u => u.user_id === userId);
            if (!user) return;

            document.getElementById('deleteUserName').textContent = user.user_name;
            document.getElementById('confirmDeleteBtn').setAttribute('data-user-id', userId);
            document.getElementById('deleteModal').style.display = 'flex';
        }

        // Hide delete modal
        function hideDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
        }

        // Save user (create or update)
        async function saveUser(e) {
            e.preventDefault();
            
            const token = localStorage.getItem('clientToken');
            const formData = new FormData(e.target);
            
            // Get selected branches
            const selectedBranches = Array.from(document.querySelectorAll('#branchCheckboxes input[type="checkbox"]:checked'))
                .map(cb => parseInt(cb.value));

            const userData = {
                user_name: formData.get('user_name'),
                email: formData.get('email'),
                role: formData.get('role'),
                status: formData.get('status') === 'true',
                branch_id: selectedBranches.length > 0 ? selectedBranches : null
            };

            if (!currentEditUserId) {
                userData.password = formData.get('password');
            }

            const saveBtn = document.getElementById('saveUserBtn');
            saveBtn.disabled = true;
            document.getElementById('saveButtonText').textContent = 'Saving...';

            try {
                const url = currentEditUserId ? `/api/users/management/${currentEditUserId}` : '/api/users/management';
                const method = currentEditUserId ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(userData)
                });

                const data = await response.json();

                if (data.success) {
                    showNotification(currentEditUserId ? 'User updated successfully' : 'User created successfully', 'success');
                    hideUserModal();
                    loadUsers();
                } else {
                    showNotification('Error: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('Error saving user:', error);
                showNotification('Failed to save user', 'error');
            } finally {
                saveBtn.disabled = false;
                document.getElementById('saveButtonText').textContent = currentEditUserId ? 'Update User' : 'Save User';
            }
        }

        // Delete user
        async function deleteUser() {
            const userId = document.getElementById('confirmDeleteBtn').getAttribute('data-user-id');
            const token = localStorage.getItem('clientToken');

            const deleteBtn = document.getElementById('confirmDeleteBtn');
            deleteBtn.disabled = true;
            deleteBtn.textContent = 'Deleting...';

            try {
                const response = await fetch(`/api/users/management/${userId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('User deleted successfully', 'success');
                    hideDeleteModal();
                    loadUsers();
                } else {
                    showNotification('Error: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                showNotification('Failed to delete user', 'error');
            } finally {
                deleteBtn.disabled = false;
                deleteBtn.textContent = 'Delete User';
            }
        }

        // Logout function
        function logout() {
            localStorage.removeItem('clientToken');
            window.location.href = '/login';
        }

        // Show notification
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            
            // Style the notification
            notification.style.position = 'fixed';
            notification.style.top = '20px';
            notification.style.right = '20px';
            notification.style.zIndex = '10000';
            notification.style.padding = '12px 20px';
            notification.style.borderRadius = '6px';
            notification.style.color = 'white';
            notification.style.fontWeight = '500';
            notification.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
            
            // Set background color based on type
            switch(type) {
                case 'success':
                    notification.style.backgroundColor = '#10b981';
                    break;
                case 'error':
                    notification.style.backgroundColor = '#ef4444';
                    break;
                case 'warning':
                    notification.style.backgroundColor = '#f59e0b';
                    break;
                default:
                    notification.style.backgroundColor = '#3b82f6';
            }
            
            // Add to DOM
            document.body.appendChild(notification);
            
            // Remove after 5 seconds
            setTimeout(() => {
                notification.remove();
            }, 5000);
        }
    </script>
</body>
</html>
